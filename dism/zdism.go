// Code generated by 'go generate'; DO NOT EDIT.

package dism

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modDismAPI = windows.NewLazySystemDLL("DismAPI.dll")

	procDismCloseSession  = modDismAPI.NewProc("DismCloseSession")
	procDismEnableFeature = modDismAPI.NewProc("DismEnableFeature")
	procDismGetFeatures   = modDismAPI.NewProc("DismGetFeatures")
	procDismInitialize    = modDismAPI.NewProc("DismInitialize")
	procDismOpenSession   = modDismAPI.NewProc("DismOpenSession")
	procDismShutdown      = modDismAPI.NewProc("DismShutdown")
)

func DismCloseSession(Session uint32) (e error) {
	r0, _, _ := syscall.Syscall(procDismCloseSession.Addr(), 1, uintptr(Session), 0, 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func DismEnableFeature(Session uint32, FeatureName *uint16, Identifier *uint16, PackageIdentifier *DismPackageIdentifier, LimitAccess bool, SourcePaths *string, SourcePathCount uint32, EnableAll bool, CancelEvent *windows.Handle, Progress unsafe.Pointer, UserData unsafe.Pointer) (e error) {
	var _p0 uint32
	if LimitAccess {
		_p0 = 1
	}
	var _p1 uint32
	if EnableAll {
		_p1 = 1
	}
	r0, _, _ := syscall.Syscall12(procDismEnableFeature.Addr(), 11, uintptr(Session), uintptr(unsafe.Pointer(FeatureName)), uintptr(unsafe.Pointer(Identifier)), uintptr(unsafe.Pointer(PackageIdentifier)), uintptr(_p0), uintptr(unsafe.Pointer(SourcePaths)), uintptr(SourcePathCount), uintptr(_p1), uintptr(unsafe.Pointer(CancelEvent)), uintptr(Progress), uintptr(UserData), 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func DismGetFeatures(Session uint32, Identifier *uint16, PackageIdentifier *DismPackageIdentifier, Feature *[]byte, Count *uint32) (e error) {
	r0, _, _ := syscall.Syscall6(procDismGetFeatures.Addr(), 5, uintptr(Session), uintptr(unsafe.Pointer(Identifier)), uintptr(unsafe.Pointer(PackageIdentifier)), uintptr(unsafe.Pointer(Feature)), uintptr(unsafe.Pointer(Count)), 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func DismInitialize(LogLevel DismLogLevel, LogFilePath *uint16, ScratchDirectory *uint16) (e error) {
	r0, _, _ := syscall.Syscall(procDismInitialize.Addr(), 3, uintptr(LogLevel), uintptr(unsafe.Pointer(LogFilePath)), uintptr(unsafe.Pointer(ScratchDirectory)))
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func DismOpenSession(ImagePath *uint16, WindowsDirectory *uint16, SystemDrive *uint16, Session *uint32) (e error) {
	r0, _, _ := syscall.Syscall6(procDismOpenSession.Addr(), 4, uintptr(unsafe.Pointer(ImagePath)), uintptr(unsafe.Pointer(WindowsDirectory)), uintptr(unsafe.Pointer(SystemDrive)), uintptr(unsafe.Pointer(Session)), 0, 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}

func DismShutdown() (e error) {
	r0, _, _ := syscall.Syscall(procDismShutdown.Addr(), 0, 0, 0, 0)
	if r0 != 0 {
		e = syscall.Errno(r0)
	}
	return
}
